use std::str::FromStr;

use crate::data::Language;

impl Language {
    pub fn from_id(id: u8) -> Option<Language> {
        match id {
            1 => Some(Language::English),
            17 => Some(Language::Afrikaans),
            32 => Some(Language::Arabic),
            35 => Some(Language::Bengali),
            51 => Some(Language::Bosnian),
            18 => Some(Language::Bulgarian),
            6 => Some(Language::Burmese),
            44 => Some(Language::Cantonese),
            19 => Some(Language::Catalan),
            2 => Some(Language::Chinese),
            49 => Some(Language::Croatian),
            20 => Some(Language::Czech),
            21 => Some(Language::Danish),
            22 => Some(Language::Dutch),
            61 => Some(Language::Estonian),
            39 => Some(Language::Farsi),
            23 => Some(Language::Finnish),
            36 => Some(Language::French),
            37 => Some(Language::German),
            26 => Some(Language::Greek),
            59 => Some(Language::GreekAncient),
            3 => Some(Language::Gujarati),
            27 => Some(Language::Hebrew),
            8 => Some(Language::Hindi),
            28 => Some(Language::Hungarian),
            63 => Some(Language::Icelandic),
            53 => Some(Language::Indonesian),
            56 => Some(Language::Irish),
            43 => Some(Language::Italian),
            38 => Some(Language::Japanese),
            12 => Some(Language::Javanese),
            5 => Some(Language::Kannada),
            41 => Some(Language::Korean),
            50 => Some(Language::Lithuanian),
            46 => Some(Language::Latin),
            62 => Some(Language::Latvian),
            33 => Some(Language::Malay),
            58 => Some(Language::Malayalam),
            57 => Some(Language::Manx),
            9 => Some(Language::Marathi),
            48 => Some(Language::Norwegian),
            45 => Some(Language::Polish),
            34 => Some(Language::Portuguese),
            52 => Some(Language::BrazilianPortuguese),
            14 => Some(Language::Punjabi),
            30 => Some(Language::Romanian),
            16 => Some(Language::Russian),
            24 => Some(Language::ScottishGaelic),
            60 => Some(Language::Sanskrit),
            31 => Some(Language::Serbian),
            54 => Some(Language::Slovenian),
            4 => Some(Language::Spanish),
            55 => Some(Language::CastilianSpanish),
            40 => Some(Language::Swedish),
            29 => Some(Language::Tagalog),
            11 => Some(Language::Tamil),
            10 => Some(Language::Telugu),
            7 => Some(Language::Thai),
            42 => Some(Language::Turkish),
            25 => Some(Language::Ukrainian),
            15 => Some(Language::Urdu),
            13 => Some(Language::Vietnamese),
            47 => Some(Language::Other),
            _ => None,
        }
    }

    pub fn to_id(self) -> u8 {
        match self {
            Language::English => 1,
            Language::Afrikaans => 17,
            Language::Arabic => 32,
            Language::Bengali => 35,
            Language::Bosnian => 51,
            Language::Bulgarian => 18,
            Language::Burmese => 6,
            Language::Cantonese => 44,
            Language::Catalan => 19,
            Language::Chinese => 2,
            Language::Croatian => 49,
            Language::Czech => 20,
            Language::Danish => 21,
            Language::Dutch => 22,
            Language::Estonian => 61,
            Language::Farsi => 39,
            Language::Finnish => 23,
            Language::French => 36,
            Language::German => 37,
            Language::Greek => 26,
            Language::GreekAncient => 59,
            Language::Gujarati => 3,
            Language::Hebrew => 27,
            Language::Hindi => 8,
            Language::Hungarian => 28,
            Language::Icelandic => 63,
            Language::Indonesian => 53,
            Language::Irish => 56,
            Language::Italian => 43,
            Language::Japanese => 38,
            Language::Javanese => 12,
            Language::Kannada => 5,
            Language::Korean => 41,
            Language::Lithuanian => 50,
            Language::Latin => 46,
            Language::Latvian => 62,
            Language::Malay => 33,
            Language::Malayalam => 58,
            Language::Manx => 57,
            Language::Marathi => 9,
            Language::Norwegian => 48,
            Language::Polish => 45,
            Language::Portuguese => 34,
            Language::BrazilianPortuguese => 52,
            Language::Punjabi => 14,
            Language::Romanian => 30,
            Language::Russian => 16,
            Language::ScottishGaelic => 24,
            Language::Sanskrit => 60,
            Language::Serbian => 31,
            Language::Slovenian => 54,
            Language::Spanish => 4,
            Language::CastilianSpanish => 55,
            Language::Swedish => 40,
            Language::Tagalog => 29,
            Language::Tamil => 11,
            Language::Telugu => 10,
            Language::Thai => 7,
            Language::Turkish => 42,
            Language::Ukrainian => 25,
            Language::Urdu => 15,
            Language::Vietnamese => 13,
            Language::Other => 47,
        }
    }

    pub fn to_str(self) -> &'static str {
        match self {
            Language::English => "English",
            Language::Afrikaans => "Afrikaans",
            Language::Arabic => "Arabic",
            Language::Bengali => "Bengali",
            Language::Bosnian => "Bosnian",
            Language::Bulgarian => "Bulgarian",
            Language::Burmese => "Burmese",
            Language::Cantonese => "Cantonese",
            Language::Catalan => "Catalan",
            Language::Chinese => "Chinese",
            Language::Croatian => "Croatian",
            Language::Czech => "Czech",
            Language::Danish => "Danish",
            Language::Dutch => "Dutch",
            Language::Estonian => "Estonian",
            Language::Farsi => "Farsi",
            Language::Finnish => "Finnish",
            Language::French => "French",
            Language::German => "German",
            Language::Greek => "Greek",
            Language::GreekAncient => "Ancient Greek",
            Language::Gujarati => "Gujarati",
            Language::Hebrew => "Hebrew",
            Language::Hindi => "Hindi",
            Language::Hungarian => "Hungarian",
            Language::Icelandic => "Icelandic",
            Language::Indonesian => "Indonesian",
            Language::Irish => "Irish",
            Language::Italian => "Italian",
            Language::Japanese => "Japanese",
            Language::Javanese => "Javanese",
            Language::Kannada => "Kannada",
            Language::Korean => "Korean",
            Language::Lithuanian => "Lithuanian",
            Language::Latin => "Latin",
            Language::Latvian => "Latvian",
            Language::Malay => "Malay",
            Language::Malayalam => "Malayalam",
            Language::Manx => "Manx",
            Language::Marathi => "Marathi",
            Language::Norwegian => "Norwegian",
            Language::Polish => "Polish",
            Language::Portuguese => "Portuguese",
            Language::BrazilianPortuguese => "Brazilian",
            Language::Punjabi => "Punjabi",
            Language::Romanian => "Romanian",
            Language::Russian => "Russian",
            Language::ScottishGaelic => "Scottish",
            Language::Sanskrit => "Sanskrit",
            Language::Serbian => "Serbian",
            Language::Slovenian => "Slovenian",
            Language::Spanish => "Spanish",
            Language::CastilianSpanish => "Castilian",
            Language::Swedish => "Swedish",
            Language::Tagalog => "Tagalog",
            Language::Tamil => "Tamil",
            Language::Telugu => "Telugu",
            Language::Thai => "Thai",
            Language::Turkish => "Turkish",
            Language::Ukrainian => "Ukrainian",
            Language::Urdu => "Urdu",
            Language::Vietnamese => "Vietnamese",
            Language::Other => "Other",
        }
    }

    pub fn all() -> Vec<Language> {
        vec![
            Language::English,
            Language::Afrikaans,
            Language::Arabic,
            Language::Bengali,
            Language::Bosnian,
            Language::Bulgarian,
            Language::Burmese,
            Language::Cantonese,
            Language::Catalan,
            Language::Chinese,
            Language::Croatian,
            Language::Czech,
            Language::Danish,
            Language::Dutch,
            Language::Estonian,
            Language::Farsi,
            Language::Finnish,
            Language::French,
            Language::German,
            Language::Greek,
            Language::GreekAncient,
            Language::Gujarati,
            Language::Hebrew,
            Language::Hindi,
            Language::Hungarian,
            Language::Icelandic,
            Language::Indonesian,
            Language::Irish,
            Language::Italian,
            Language::Japanese,
            Language::Javanese,
            Language::Kannada,
            Language::Korean,
            Language::Lithuanian,
            Language::Latin,
            Language::Latvian,
            Language::Malay,
            Language::Malayalam,
            Language::Manx,
            Language::Marathi,
            Language::Norwegian,
            Language::Polish,
            Language::Portuguese,
            Language::BrazilianPortuguese,
            Language::Punjabi,
            Language::Romanian,
            Language::Russian,
            Language::ScottishGaelic,
            Language::Sanskrit,
            Language::Serbian,
            Language::Slovenian,
            Language::Spanish,
            Language::CastilianSpanish,
            Language::Swedish,
            Language::Tagalog,
            Language::Tamil,
            Language::Telugu,
            Language::Thai,
            Language::Turkish,
            Language::Ukrainian,
            Language::Urdu,
            Language::Vietnamese,
            Language::Other,
        ]
    }
}

impl FromStr for Language {
    type Err = String;

    fn from_str(value: &str) -> Result<Self, Self::Err> {
        let l = match value.to_lowercase().as_str() {
            "english" => Some(Language::English),
            "afrikaans" => Some(Language::Afrikaans),
            "arabic" => Some(Language::Arabic),
            "bengali" => Some(Language::Bengali),
            "bosnian" => Some(Language::Bosnian),
            "bulgarian" => Some(Language::Bulgarian),
            "burmese" => Some(Language::Burmese),
            "cantonese" => Some(Language::Cantonese),
            "catalan" => Some(Language::Catalan),
            "chinese" => Some(Language::Chinese),
            "croatian" => Some(Language::Croatian),
            "czech" => Some(Language::Czech),
            "danish" => Some(Language::Danish),
            "dutch" => Some(Language::Dutch),
            "estonian" => Some(Language::Estonian),
            "farsi" => Some(Language::Farsi),
            "finnish" => Some(Language::Finnish),
            "french" => Some(Language::French),
            "german" => Some(Language::German),
            "greek" => Some(Language::Greek),
            "ancient greek" => Some(Language::GreekAncient),
            "greek ancient" => Some(Language::GreekAncient),
            "greek, ancient" => Some(Language::GreekAncient),
            "gujarati" => Some(Language::Gujarati),
            "hebrew" => Some(Language::Hebrew),
            "hindi" => Some(Language::Hindi),
            "hungarian" => Some(Language::Hungarian),
            "icelandic" => Some(Language::Icelandic),
            "indonesian" => Some(Language::Indonesian),
            "irish" => Some(Language::Irish),
            "italian" => Some(Language::Italian),
            "japanese" => Some(Language::Japanese),
            "javanese" => Some(Language::Javanese),
            "kannada" => Some(Language::Kannada),
            "korean" => Some(Language::Korean),
            "lithuanian" => Some(Language::Lithuanian),
            "latin" => Some(Language::Latin),
            "latvian" => Some(Language::Latvian),
            "malay" => Some(Language::Malay),
            "malayalam" => Some(Language::Malayalam),
            "manx" => Some(Language::Manx),
            "marathi" => Some(Language::Marathi),
            "norwegian" => Some(Language::Norwegian),
            "polish" => Some(Language::Polish),
            "portuguese" => Some(Language::Portuguese),
            "bp" => Some(Language::BrazilianPortuguese),
            "brazilian" => Some(Language::BrazilianPortuguese),
            "brazilian portuguese" => Some(Language::BrazilianPortuguese),
            "brazilian portuguese (bp)" => Some(Language::BrazilianPortuguese),
            "punjabi" => Some(Language::Punjabi),
            "romanian" => Some(Language::Romanian),
            "russian" => Some(Language::Russian),
            "scottish" => Some(Language::ScottishGaelic),
            "scottish gaelic" => Some(Language::ScottishGaelic),
            "gaelic" => Some(Language::ScottishGaelic),
            "sanskrit" => Some(Language::Sanskrit),
            "serbian" => Some(Language::Serbian),
            "slovenian" => Some(Language::Slovenian),
            "spanish" => Some(Language::Spanish),
            "castilian" => Some(Language::CastilianSpanish),
            "castilian spanish" => Some(Language::CastilianSpanish),
            "swedish" => Some(Language::Swedish),
            "tagalog" => Some(Language::Tagalog),
            "tamil" => Some(Language::Tamil),
            "telugu" => Some(Language::Telugu),
            "thai" => Some(Language::Thai),
            "turkish" => Some(Language::Turkish),
            "ukrainian" => Some(Language::Ukrainian),
            "urdu" => Some(Language::Urdu),
            "vietnamese" => Some(Language::Vietnamese),
            "other" => Some(Language::Other),
            _ => None,
        };
        match l {
            Some(l) => Ok(l),
            None => Err(format!("invalid language {value}")),
        }
    }
}

impl TryFrom<String> for Language {
    type Error = String;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        value.parse()
    }
}
